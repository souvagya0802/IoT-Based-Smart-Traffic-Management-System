#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/12d86606-87b6-40d8-968c-49e14a1419a5 

  CloudLight aCLED;
  CloudLight bDLED;
  CloudLight sWAPTraffic;
*/

#include "thingProperties.h"

#define LEDAC1 16   //Green PIN   D0   For road A and C
#define LEDAC2  5   //Yellow PIN  D1   For road A and C
#define LEDAC3  4   //Red PIN     D2   For road A and C

#define LEDBD1  14  //Green PIN   D5   For road B and D
#define LEDBD2  12  //Yellow PIN  D6   For road B and D
#define LEDBD3  13  //Red PIN     D7   For road B and D

int i1=0,i2=2;      //D3 AND D4   
int val1=0, val2=0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  pinMode(LEDAC1, OUTPUT);
  pinMode(LEDAC2, OUTPUT);
  pinMode(LEDAC3, OUTPUT);
  pinMode(LEDBD1, OUTPUT);
  pinMode(LEDBD2, OUTPUT);
  pinMode(LEDBD3, OUTPUT);
  pinMode(i1, INPUT);
  pinMode(i2, INPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
 
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}
void onSWAPTrafficChange(){
  if(sWAPTraffic==1){
    readSensor();

    if(val1==HIGH && val2==LOW)
    {
      roadACopen();
    }
    else if(val1==LOW && val2==HIGH)
    {
      roadBDopen();
    }
    else if(val1==HIGH && val2==HIGH)
    {
      roadACopen();
      roadBDopen();
    }
    else if(val1==LOW && val2==LOW)
    {
      roadACopen();
      roadBDopen();
    }
    
    
  }
  else if(aCLED == 1){
      digitalWrite(LEDAC1, HIGH);
      digitalWrite(LEDAC2, LOW);
      digitalWrite(LEDAC3, LOW);
      digitalWrite(LEDBD1, LOW);
      digitalWrite(LEDBD2, LOW);
      digitalWrite(LEDBD3, HIGH);
      //onSWAPTrafficChange();
  }
  else if(bDLED == 1){
      digitalWrite(LEDBD1, HIGH);
      digitalWrite(LEDBD2, LOW);
      digitalWrite(LEDBD3, LOW);
      digitalWrite(LEDAC1, LOW);
      digitalWrite(LEDAC2, LOW);
      digitalWrite(LEDAC3, HIGH);
      //onSWAPTrafficChange();
  }
  else{
      digitalWrite(LEDAC1, LOW);
      digitalWrite(LEDAC2, HIGH);
      digitalWrite(LEDAC3, LOW);
      digitalWrite(LEDBD1, LOW);
      digitalWrite(LEDBD2, HIGH);
      digitalWrite(LEDBD3, LOW);
    
  }

}

void loop() {
  ArduinoCloud.update();
  onSWAPTrafficChange();
  
}

void readSensor(){

  val1=digitalRead(i1);
  val2=digitalRead(i2);                                     

  if(val1==1)
  {
    val1=HIGH;
  }
  else
  {
    val1=LOW;
  }
  if(val2==1)
  {
    val2=HIGH;
  }
  else
  {
    val2=LOW;
  }
  Serial.print(val1);
  Serial.print("\t");
  Serial.print(val2);
  Serial.print("\t");
  
  
}

void roadACopen()
{
  delay(800);
  digitalWrite(LEDAC1, HIGH);
  digitalWrite(LEDAC2, LOW);
  digitalWrite(LEDAC3, LOW);
  digitalWrite(LEDBD1, LOW);
  digitalWrite(LEDBD2, LOW);
  digitalWrite(LEDBD3, HIGH);
  delay(10000);
  digitalWrite(LEDAC1, LOW);
  digitalWrite(LEDAC2, HIGH);
  delay(1500);
  digitalWrite(LEDAC2, LOW);
  digitalWrite(LEDAC3, HIGH);
  readSensor();
}
void roadBDopen()
{
  delay(800);
  digitalWrite(LEDBD1, HIGH);
  digitalWrite(LEDBD2, LOW);
  digitalWrite(LEDBD3, LOW);
  digitalWrite(LEDAC1, LOW);
  digitalWrite(LEDAC2, LOW);
  digitalWrite(LEDAC3, HIGH);
  delay(10000);
  digitalWrite(LEDBD1, LOW);
  digitalWrite(LEDBD2, HIGH);
  delay(1500);
  digitalWrite(LEDBD2, LOW);
  digitalWrite(LEDBD3, HIGH);
  //onSWAPTrafficChange();
  readSensor();
}
void onACLEDChange(){
  
}
void onBDLEDChange(){
  
}


/*
  Since ACLED is READ_WRITE variable, onACLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onACLEDChange()  {
  // Add your code here to act upon ACLED change
}
/*
  Since BDLED is READ_WRITE variable, onBDLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBDLEDChange()  {
  // Add your code here to act upon BDLED change
}
/*
  Since SWAPTraffic is READ_WRITE variable, onSWAPTrafficChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSWAPTrafficChange()  {
  // Add your code here to act upon SWAPTraffic change
}